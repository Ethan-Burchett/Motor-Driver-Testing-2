import RPi.GPIO as GPIO
import time
from DRV8825 import DRV8825
import math 
from rotate_functions import rotate

#end stop controller
#working with end stop limit switch with signal(green) on pin 23 using GPIO.setmode(GPIO.BCM)
#red: voltage(4), black:ground (6), green:signal(23)(gpio 11)
button_press_count = 0
button_pin = 27 #board 13

GPIO.setwarnings(False) # Ignore warning for now
GPIO.setmode(GPIO.BCM) # Use BCM pin numbering - most common and motor driver lib uses it

Motor1 = DRV8825(dir_pin=13, step_pin=19, enable_pin=12, mode_pins=(16, 17, 20))  #in use: 12,13,15,16,17,19,20
#12 and 13 are used for ** 
# Motor1.SetMicroStep('hardward','fullstep')

toggle = True

# def rotate(motor,rotations,speed): #default speed = 0.001
#     msteps = math.ceil(abs(rotations) * 800)
#     direction = 'backward'
#     if(rotations<0): #counterclockwise negative(towards motor), clockwise positive(away from motor)
#         direction = 'forward'

#     if(speed > 5):
#         speed = 5
#     mspeed = 0.001 / speed
#     motor.TurnStep(Dir=direction, steps=msteps, stepdelay = mspeed)


def button_callback(channel):
    global button_press_count
    global toggle
    print("Button was pushed!:")
    print(button_press_count)
    button_press_count +=1

    if toggle:
        # Motor1.TurnStep(Dir='backward', steps=800, stepdelay = 0.001)
        rotate(Motor1,2,1)
        toggle = False
        return

    if not toggle:
        # Motor1.TurnStep(Dir='forward', steps=500, stepdelay = 0.001)
        toggle = True
        Motor1.sleep = True
        return
       
        

GPIO.setup(button_pin, GPIO.IN, pull_up_down=GPIO.PUD_DOWN) # Set pin 10 to be an input pin and set initial value to be pulled low (off)
GPIO.add_event_detect(button_pin,GPIO.FALLING,callback=button_callback,bouncetime=100) # Setup event on pin 10 rising edge
message = input("Press enter to quit\n\n") # Run until someone presses enter
GPIO.cleanup() # Clean up

# Motor2 = DRV8825(dir_pin=24, step_pin=18, enable_pin=4, mode_pins=(21, 22, 27))
# Motor2.SetMicroStep('hardward','fullstep')


# Stop = 1
# while(Stop == 1):
#     key = input()
#     if(key == 'f'): #forward
#         Motor1.TurnStep(Dir='forward', steps=800, stepdelay = 0.001)
#         #Motor2.TurnStep(Dir='forward', steps=800, stepdelay = 0.001)
#     if(key == 'b'): #backward
#         Motor1.TurnStep(Dir='backward', steps=800, stepdelay = 0.001)

#     if(key == 's'):
#         Stop = 0

time.sleep(0.5)
#Motor1.TurnStep(Dir='backward', steps=400, stepdelay = 0.005)
Motor1.Stop()


#wiring notes: 
# A and B end stops
#A(motor side) Green->Blue(signal),Red->Orange(voltage),Black->Grey(ground)

#B(end side)   Green->White(signal),Red->Yellow(voltage),Black->Brown(ground)